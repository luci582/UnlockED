generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                 String                 @id @default(cuid())
  email              String                 @unique
  username           String                 @unique
  firstName          String
  lastName           String
  profileImage       String?
  bio                String?
  role               String                 @default("STUDENT")
  isVerified         Boolean                @default(false)
  verificationToken  String?
  passwordHash       String
  totalPoints        Int                    @default(0)
  reviewStreak       Int                    @default(0)
  lastActiveAt       DateTime               @default(now())
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  enrollments        CourseEnrollment[]
  courses            Course[]
  notifications      Notification[]
  progressReports    ProgressReport[]
  reviewHelpfulVotes ReviewHelpfulVote[]
  reviewVotes        ReviewVote[]
  reviews            Review[]
  achievements       UserAchievement[]
  skillProficiencies UserSkillProficiency[]

  @@map("users")
}

model Course {
  id               String             @id @default(cuid())
  title            String
  description      String
  shortDescription String?
  imageUrl         String?
  thumbnailUrl     String?
  courseUrl        String
  instructor       String
  institution      String?
  duration         String?
  difficulty       String
  status           String             @default("PUBLISHED")
  price            Float?
  isFree           Boolean            @default(false)
  language         String             @default("English")
  rating           Float?
  reviewCount      Int                @default(0)
  enrollmentCount  Int                @default(0)
  isActive         Boolean            @default(true)
  prerequisites    String?
  learningOutcomes String?
  syllabus         Json?
  lastUpdated      DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  createdById      String
  categories       CourseCategory[]
  enrollments      CourseEnrollment[]
  modules          CourseModule[]
  skills           CourseSkill[]
  tags             CourseTag[]
  createdBy        User               @relation(fields: [createdById], references: [id])
  reviews          Review[]

  @@map("courses")
}

model Skill {
  id                String                 @id @default(cuid())
  name              String                 @unique
  description       String?
  category          String?
  icon              String?
  color             String?
  isActive          Boolean                @default(true)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  courses           CourseSkill[]
  reviewRatings     ReviewSkillRating[]
  prerequisiteFor   SkillPrerequisite[]    @relation("PrerequisiteSkill")
  prerequisites     SkillPrerequisite[]    @relation("DependentSkill")
  userProficiencies UserSkillProficiency[]

  @@map("skills")
}

model CourseSkill {
  id         String   @id @default(cuid())
  courseId   String
  skillId    String
  level      String   @default("MEDIUM")
  isCore     Boolean  @default(false)
  percentage Int?     @default(0)
  createdAt  DateTime @default(now())
  skill      Skill    @relation(fields: [skillId], references: [id])
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, skillId])
  @@map("course_skills")
}

model Review {
  id               String              @id @default(cuid())
  userId           String
  courseId         String
  overallRating    Int
  difficultyRating Int?
  contentQuality   Int?
  instructorRating Int?
  valueForMoney    Int?
  wouldRecommend   Boolean?
  title            String
  content          String
  pros             String?
  cons             String?
  isAnonymous      Boolean             @default(false)
  isVerified       Boolean             @default(false)
  helpfulCount     Int                 @default(0)
  flagCount        Int                 @default(0)
  isHidden         Boolean             @default(false)
  moderatorNotes   String?
  completionDate   DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  helpfulVotes     ReviewHelpfulVote[]
  skillRatings     ReviewSkillRating[]
  votes            ReviewVote[]
  course           Course              @relation(fields: [courseId], references: [id])
  user             User                @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@map("reviews")
}

model ReviewVote {
  id        String   @id @default(cuid())
  userId    String
  reviewId  String
  isUpvote  Boolean
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, reviewId])
  @@map("review_votes")
}

model ReviewHelpfulVote {
  id        String   @id @default(cuid())
  userId    String
  reviewId  String
  isHelpful Boolean
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, reviewId])
  @@map("review_helpful_votes")
}

model ReviewSkillRating {
  id        String   @id @default(cuid())
  reviewId  String
  skillId   String
  rating    Int
  createdAt DateTime @default(now())
  skill     Skill    @relation(fields: [skillId], references: [id])
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([reviewId, skillId])
  @@map("review_skill_ratings")
}

model CourseEnrollment {
  id             String    @id @default(cuid())
  userId         String
  courseId       String
  enrolledAt     DateTime  @default(now())
  completedAt    DateTime?
  progress       Int       @default(0)
  lastAccessed   DateTime  @default(now())
  status         String    @default("active")
  certificateUrl String?
  course         Course    @relation(fields: [courseId], references: [id])
  user           User      @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@map("course_enrollments")
}

model UserSkillProficiency {
  id                 String    @id @default(cuid())
  userId             String
  skillId            String
  level              String
  yearsExperience    Int?      @default(0)
  lastUsed           DateTime?
  isVerified         Boolean   @default(false)
  verificationSource String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  skill              Skill     @relation(fields: [skillId], references: [id])
  user               User      @relation(fields: [userId], references: [id])

  @@unique([userId, skillId])
  @@map("user_skill_proficiencies")
}

model SkillPrerequisite {
  id                  String  @id @default(cuid())
  skillId             String
  prerequisiteSkillId String
  isRequired          Boolean @default(true)
  minimumLevel        String  @default("LIGHT")
  prerequisiteSkill   Skill   @relation("PrerequisiteSkill", fields: [prerequisiteSkillId], references: [id])
  skill               Skill   @relation("DependentSkill", fields: [skillId], references: [id])

  @@unique([skillId, prerequisiteSkillId])
  @@map("skill_prerequisites")
}

model Category {
  id          String           @id @default(cuid())
  name        String           @unique
  slug        String           @unique
  description String?
  icon        String?
  color       String?
  parentId    String?
  sortOrder   Int              @default(0)
  isActive    Boolean          @default(true)
  parent      Category?        @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]       @relation("CategoryHierarchy")
  courses     CourseCategory[]

  @@map("categories")
}

model CourseCategory {
  id         String   @id @default(cuid())
  courseId   String
  categoryId String
  isPrimary  Boolean  @default(false)
  category   Category @relation(fields: [categoryId], references: [id])
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, categoryId])
  @@map("course_categories")
}

model Tag {
  id        String      @id @default(cuid())
  name      String      @unique
  color     String?
  createdAt DateTime    @default(now())
  courses   CourseTag[]

  @@map("tags")
}

model CourseTag {
  id       String @id @default(cuid())
  courseId String
  tagId    String
  tag      Tag    @relation(fields: [tagId], references: [id])
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, tagId])
  @@map("course_tags")
}

model CourseModule {
  id          String  @id @default(cuid())
  courseId    String
  title       String
  description String?
  sortOrder   Int
  duration    String?
  isOptional  Boolean @default(false)
  course      Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_modules")
}

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  icon        String?
  type        String
  criteria    Json
  points      Int               @default(0)
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  users       UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime    @default(now())
  progress      Json?
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  isRead    Boolean   @default(false)
  data      Json?
  createdAt DateTime  @default(now())
  readAt    DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model ProgressReport {
  id               String   @id @default(cuid())
  userId           String
  reportDate       DateTime @default(now())
  coursesCompleted Int      @default(0)
  reviewsWritten   Int      @default(0)
  pointsEarned     Int      @default(0)
  skillsLearned    String?
  weeklyGoalMet    Boolean  @default(false)
  monthlyGoalMet   Boolean  @default(false)
  user             User     @relation(fields: [userId], references: [id])

  @@map("progress_reports")
}
