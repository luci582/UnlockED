// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum SkillLevel {
  LIGHT
  MEDIUM
  HEAVY
  VERY_HEAVY
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  UNDER_REVIEW
}

enum AchievementType {
  REVIEW_COUNT
  COURSE_COMPLETION
  STREAK
  RATING_QUALITY
  FIRST_REVIEW
  HELPFUL_REVIEWS
  SKILL_MASTERY
  COMMUNITY_CONTRIBUTOR
}

// User table - Core user information
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  username          String   @unique
  firstName         String
  lastName          String
  profileImage      String?
  bio               String?
  role              UserRole @default(STUDENT)
  isVerified        Boolean  @default(false)
  verificationToken String?
  passwordHash      String
  totalPoints       Int      @default(0)
  reviewStreak      Int      @default(0)
  lastActiveAt      DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  reviews              Review[]
  reviewVotes          ReviewVote[]
  enrollments          CourseEnrollment[]
  achievements         UserAchievement[]
  notifications        Notification[]
  courses              Course[]               // Courses created by this user
  skillProficiencies   UserSkillProficiency[]
  reviewHelpfulVotes   ReviewHelpfulVote[]
  progressReports      ProgressReport[]

  @@map("users")
}

// Course table - Core course information
model Course {
  id                String       @id @default(cuid())
  title             String
  description       String
  shortDescription  String?
  imageUrl          String?
  thumbnailUrl      String?
  courseUrl         String
  instructor        String
  institution       String?
  duration          String? // e.g., "4 weeks", "Self-paced"
  difficulty        Difficulty
  status            CourseStatus @default(PUBLISHED)
  price             Decimal?     @db.Decimal(10, 2)
  isFree            Boolean      @default(false)
  language          String       @default("English")
  rating            Decimal?     @db.Decimal(3, 2) // Computed field, updated via triggers/code
  reviewCount       Int          @default(0) // Computed field
  enrollmentCount   Int          @default(0) // Computed field
  isActive          Boolean      @default(true)
  prerequisites     String[] // Array of prerequisite course names/skills
  learningOutcomes  String[] // Array of learning outcomes
  syllabus          Json? // JSON structure for course syllabus
  lastUpdated       DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Foreign keys
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  // Relationships
  reviews      Review[]
  skills       CourseSkill[]
  enrollments  CourseEnrollment[]
  categories   CourseCategory[]
  tags         CourseTag[]
  modules      CourseModule[]

  @@map("courses")
}

// Skill table - Skills associated with courses
model Skill {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  category    String? // e.g., "Programming", "Design", "Business"
  icon        String? // Icon identifier for UI
  color       String? // Color for UI representation
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relationships
  courses              CourseSkill[]
  userProficiencies    UserSkillProficiency[]
  prerequisiteFor      SkillPrerequisite[]    @relation("PrerequisiteSkill")
  prerequisites        SkillPrerequisite[]    @relation("DependentSkill")
  reviewRatings        ReviewSkillRating[]

  @@map("skills")
}

// Junction table for Course-Skill many-to-many relationship
model CourseSkill {
  id         String     @id @default(cuid())
  courseId   String
  skillId    String
  level      SkillLevel @default(MEDIUM) // How heavily this skill is covered
  isCore     Boolean    @default(false) // Whether this is a core skill for the course
  percentage Int?       @default(0) // Percentage of course dedicated to this skill (0-100)
  createdAt  DateTime   @default(now())

  // Foreign keys
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  skill  Skill  @relation(fields: [skillId], references: [id])

  @@unique([courseId, skillId])
  @@map("course_skills")
}

// Review table - User reviews of courses
model Review {
  id               String    @id @default(cuid())
  userId           String
  courseId         String
  overallRating    Int // 1-5 stars
  difficultyRating Int? // 1-5 scale
  contentQuality   Int? // 1-5 scale
  instructorRating Int? // 1-5 scale
  valueForMoney    Int? // 1-5 scale
  wouldRecommend   Boolean?
  title            String
  content          String
  pros             String[]  @default([])
  cons             String[]  @default([])
  isAnonymous      Boolean   @default(false)
  isVerified       Boolean   @default(false) // Verified purchase/enrollment
  helpfulCount     Int       @default(0) // Computed field
  flagCount        Int       @default(0) // Number of times flagged
  isHidden         Boolean   @default(false)
  moderatorNotes   String?
  completionDate   DateTime? // When user completed the course
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Foreign keys
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  // Relationships
  votes         ReviewVote[]
  helpfulVotes  ReviewHelpfulVote[]
  skillRatings  ReviewSkillRating[]

  @@unique([userId, courseId]) // One review per user per course
  @@map("reviews")
}

// Review voting system for overall review quality
model ReviewVote {
  id       String @id @default(cuid())
  userId   String
  reviewId String
  isUpvote Boolean // true for upvote, false for downvote
  createdAt DateTime @default(now())

  // Foreign keys
  user   User   @relation(fields: [userId], references: [id])
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
  @@map("review_votes")
}

// Helpful votes for reviews (separate from quality votes)
model ReviewHelpfulVote {
  id        String   @id @default(cuid())
  userId    String
  reviewId  String
  isHelpful Boolean // true for helpful, false for not helpful
  createdAt DateTime @default(now())

  // Foreign keys
  user   User   @relation(fields: [userId], references: [id])
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
  @@map("review_helpful_votes")
}

// Skill-specific ratings within reviews
model ReviewSkillRating {
  id       String @id @default(cuid())
  reviewId String
  skillId  String
  rating   Int // 1-5 scale for how well the course taught this skill
  createdAt DateTime @default(now())

  // Foreign keys
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  skill  Skill  @relation(fields: [skillId], references: [id])

  @@unique([reviewId, skillId])
  @@map("review_skill_ratings")
}

// Course enrollment tracking
model CourseEnrollment {
  id           String    @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime  @default(now())
  completedAt  DateTime?
  progress     Int       @default(0) // 0-100 percentage
  lastAccessed DateTime  @default(now())
  status       String    @default("active") // active, completed, dropped, paused
  certificateUrl String?

  // Foreign keys
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@map("course_enrollments")
}

// User skill proficiency tracking
model UserSkillProficiency {
  id            String   @id @default(cuid())
  userId        String
  skillId       String
  level         SkillLevel
  yearsExperience Int?  @default(0)
  lastUsed      DateTime?
  isVerified    Boolean  @default(false)
  verificationSource String? // e.g., "Course Completion", "Portfolio", "Test"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Foreign keys
  user  User  @relation(fields: [userId], references: [id])
  skill Skill @relation(fields: [skillId], references: [id])

  @@unique([userId, skillId])
  @@map("user_skill_proficiencies")
}

// Skill prerequisites relationship
model SkillPrerequisite {
  id                  String @id @default(cuid())
  skillId             String // The skill that has prerequisites
  prerequisiteSkillId String // The skill that is required
  isRequired          Boolean @default(true)
  minimumLevel        SkillLevel @default(LIGHT)

  // Foreign keys
  skill             Skill @relation("DependentSkill", fields: [skillId], references: [id])
  prerequisiteSkill Skill @relation("PrerequisiteSkill", fields: [prerequisiteSkillId], references: [id])

  @@unique([skillId, prerequisiteSkillId])
  @@map("skill_prerequisites")
}

// Categories for organizing courses
model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?
  icon        String?
  color       String?
  parentId    String?
  sortOrder   Int    @default(0)
  isActive    Boolean @default(true)

  // Self-referencing relationship for subcategories
  parent   Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  
  // Relationships
  courses CourseCategory[]

  @@map("categories")
}

// Junction table for Course-Category many-to-many relationship
model CourseCategory {
  id         String @id @default(cuid())
  courseId   String
  categoryId String
  isPrimary  Boolean @default(false)

  // Foreign keys
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([courseId, categoryId])
  @@map("course_categories")
}

// Tags for additional course metadata
model Tag {
  id        String @id @default(cuid())
  name      String @unique
  color     String?
  createdAt DateTime @default(now())

  // Relationships
  courses CourseTag[]

  @@map("tags")
}

// Junction table for Course-Tag many-to-many relationship
model CourseTag {
  id       String @id @default(cuid())
  courseId String
  tagId    String

  // Foreign keys
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@unique([courseId, tagId])
  @@map("course_tags")
}

// Course modules/chapters
model CourseModule {
  id          String @id @default(cuid())
  courseId    String
  title       String
  description String?
  sortOrder   Int
  duration    String? // e.g., "2 hours"
  isOptional  Boolean @default(false)

  // Foreign keys
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_modules")
}

// Achievement system
model Achievement {
  id          String          @id @default(cuid())
  name        String          @unique
  description String
  icon        String?
  type        AchievementType
  criteria    Json // JSON object defining criteria for earning
  points      Int             @default(0)
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())

  // Relationships
  users UserAchievement[]

  @@map("achievements")
}

// User achievements
model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())
  progress      Json? // JSON for tracking progress towards achievement

  // Foreign keys
  user        User        @relation(fields: [userId], references: [id])
  achievement Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// Notification system
model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String // e.g., "review_reply", "achievement_earned", "course_update"
  isRead    Boolean  @default(false)
  data      Json? // Additional data for the notification
  createdAt DateTime @default(now())
  readAt    DateTime?

  // Foreign keys
  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// Progress reports for analytics
model ProgressReport {
  id               String   @id @default(cuid())
  userId           String
  reportDate       DateTime @default(now())
  coursesCompleted Int      @default(0)
  reviewsWritten   Int      @default(0)
  pointsEarned     Int      @default(0)
  skillsLearned    String[] @default([])
  weeklyGoalMet    Boolean  @default(false)
  monthlyGoalMet   Boolean  @default(false)

  // Foreign keys
  user User @relation(fields: [userId], references: [id])

  @@map("progress_reports")
}

// Fix the CourseTag relationship issue - removing this duplicate model
// The correct CourseTag model already exists above
