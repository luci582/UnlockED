version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: unlocked-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-unlocked}
      POSTGRES_USER: ${DATABASE_USER:-unlocked_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-unlocked_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - unlocked-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-unlocked_user} -d ${DATABASE_NAME:-unlocked}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: unlocked-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DATABASE_USER:-unlocked_user}:${DATABASE_PASSWORD:-unlocked_password}@postgres:5432/${DATABASE_NAME:-unlocked}?schema=public
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      PORT: 3001
      CORS_ORIGIN: ${FRONTEND_URL:-http://localhost:80}
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - unlocked-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true

  # Frontend React Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: unlocked-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - unlocked-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: unlocked-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - unlocked-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli --no-auth-warning -a ${REDIS_PASSWORD:-redis_password} ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true

networks:
  unlocked-network:
    driver: bridge
    name: unlocked-network

volumes:
  postgres_data:
    driver: local
    name: unlocked-postgres-data
  redis_data:
    driver: local
    name: unlocked-redis-data
