
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  profileImage: 'profileImage',
  bio: 'bio',
  role: 'role',
  isVerified: 'isVerified',
  verificationToken: 'verificationToken',
  passwordHash: 'passwordHash',
  totalPoints: 'totalPoints',
  reviewStreak: 'reviewStreak',
  lastActiveAt: 'lastActiveAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  shortDescription: 'shortDescription',
  imageUrl: 'imageUrl',
  thumbnailUrl: 'thumbnailUrl',
  courseUrl: 'courseUrl',
  instructor: 'instructor',
  institution: 'institution',
  duration: 'duration',
  difficulty: 'difficulty',
  status: 'status',
  price: 'price',
  isFree: 'isFree',
  language: 'language',
  rating: 'rating',
  reviewCount: 'reviewCount',
  enrollmentCount: 'enrollmentCount',
  isActive: 'isActive',
  prerequisites: 'prerequisites',
  learningOutcomes: 'learningOutcomes',
  syllabus: 'syllabus',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  icon: 'icon',
  color: 'color',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseSkillScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  skillId: 'skillId',
  level: 'level',
  isCore: 'isCore',
  percentage: 'percentage',
  createdAt: 'createdAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  overallRating: 'overallRating',
  difficultyRating: 'difficultyRating',
  contentQuality: 'contentQuality',
  instructorRating: 'instructorRating',
  valueForMoney: 'valueForMoney',
  wouldRecommend: 'wouldRecommend',
  title: 'title',
  content: 'content',
  pros: 'pros',
  cons: 'cons',
  isAnonymous: 'isAnonymous',
  isVerified: 'isVerified',
  helpfulCount: 'helpfulCount',
  flagCount: 'flagCount',
  isHidden: 'isHidden',
  moderatorNotes: 'moderatorNotes',
  completionDate: 'completionDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewVoteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  reviewId: 'reviewId',
  isUpvote: 'isUpvote',
  createdAt: 'createdAt'
};

exports.Prisma.ReviewHelpfulVoteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  reviewId: 'reviewId',
  isHelpful: 'isHelpful',
  createdAt: 'createdAt'
};

exports.Prisma.ReviewSkillRatingScalarFieldEnum = {
  id: 'id',
  reviewId: 'reviewId',
  skillId: 'skillId',
  rating: 'rating',
  createdAt: 'createdAt'
};

exports.Prisma.CourseEnrollmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  enrolledAt: 'enrolledAt',
  completedAt: 'completedAt',
  progress: 'progress',
  lastAccessed: 'lastAccessed',
  status: 'status',
  certificateUrl: 'certificateUrl'
};

exports.Prisma.UserSkillProficiencyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  skillId: 'skillId',
  level: 'level',
  yearsExperience: 'yearsExperience',
  lastUsed: 'lastUsed',
  isVerified: 'isVerified',
  verificationSource: 'verificationSource',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillPrerequisiteScalarFieldEnum = {
  id: 'id',
  skillId: 'skillId',
  prerequisiteSkillId: 'prerequisiteSkillId',
  isRequired: 'isRequired',
  minimumLevel: 'minimumLevel'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  icon: 'icon',
  color: 'color',
  parentId: 'parentId',
  sortOrder: 'sortOrder',
  isActive: 'isActive'
};

exports.Prisma.CourseCategoryScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  categoryId: 'categoryId',
  isPrimary: 'isPrimary'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color',
  createdAt: 'createdAt'
};

exports.Prisma.CourseTagScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  tagId: 'tagId'
};

exports.Prisma.CourseModuleScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  title: 'title',
  description: 'description',
  sortOrder: 'sortOrder',
  duration: 'duration',
  isOptional: 'isOptional'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  type: 'type',
  criteria: 'criteria',
  points: 'points',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  achievementId: 'achievementId',
  earnedAt: 'earnedAt',
  progress: 'progress'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  data: 'data',
  createdAt: 'createdAt',
  readAt: 'readAt'
};

exports.Prisma.ProgressReportScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  reportDate: 'reportDate',
  coursesCompleted: 'coursesCompleted',
  reviewsWritten: 'reviewsWritten',
  pointsEarned: 'pointsEarned',
  skillsLearned: 'skillsLearned',
  weeklyGoalMet: 'weeklyGoalMet',
  monthlyGoalMet: 'monthlyGoalMet'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  STUDENT: 'STUDENT',
  INSTRUCTOR: 'INSTRUCTOR',
  ADMIN: 'ADMIN'
};

exports.Difficulty = exports.$Enums.Difficulty = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED',
  EXPERT: 'EXPERT'
};

exports.CourseStatus = exports.$Enums.CourseStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED',
  UNDER_REVIEW: 'UNDER_REVIEW'
};

exports.SkillLevel = exports.$Enums.SkillLevel = {
  LIGHT: 'LIGHT',
  MEDIUM: 'MEDIUM',
  HEAVY: 'HEAVY',
  VERY_HEAVY: 'VERY_HEAVY'
};

exports.AchievementType = exports.$Enums.AchievementType = {
  REVIEW_COUNT: 'REVIEW_COUNT',
  COURSE_COMPLETION: 'COURSE_COMPLETION',
  STREAK: 'STREAK',
  RATING_QUALITY: 'RATING_QUALITY',
  FIRST_REVIEW: 'FIRST_REVIEW',
  HELPFUL_REVIEWS: 'HELPFUL_REVIEWS',
  SKILL_MASTERY: 'SKILL_MASTERY',
  COMMUNITY_CONTRIBUTOR: 'COMMUNITY_CONTRIBUTOR'
};

exports.Prisma.ModelName = {
  User: 'User',
  Course: 'Course',
  Skill: 'Skill',
  CourseSkill: 'CourseSkill',
  Review: 'Review',
  ReviewVote: 'ReviewVote',
  ReviewHelpfulVote: 'ReviewHelpfulVote',
  ReviewSkillRating: 'ReviewSkillRating',
  CourseEnrollment: 'CourseEnrollment',
  UserSkillProficiency: 'UserSkillProficiency',
  SkillPrerequisite: 'SkillPrerequisite',
  Category: 'Category',
  CourseCategory: 'CourseCategory',
  Tag: 'Tag',
  CourseTag: 'CourseTag',
  CourseModule: 'CourseModule',
  Achievement: 'Achievement',
  UserAchievement: 'UserAchievement',
  Notification: 'Notification',
  ProgressReport: 'ProgressReport'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
